// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/compiler/Lexer.flex

package compiler;

import java.util.Map;
import java.util.HashMap;


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\5\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\11\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\1\25\32\26\1\0\1\27\2\0\1\30"+
    "\1\0\1\26\1\31\3\26\1\31\7\26\1\31\5\26"+
    "\1\31\6\26\1\32\1\0\1\33\1\34\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\2\27\1\31\2\32\1\33\1\1\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\44\1\45"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\127\0\221\0\127"+
    "\0\256\0\127\0\127\0\127\0\127\0\313\0\127\0\127"+
    "\0\350\0\127\0\127\0\u0105\0\u0122\0\127\0\u013f\0\127"+
    "\0\127\0\127\0\u015c\0\127\0\u0179\0\u0196\0\u01b3\0\u01d0"+
    "\0\127\0\u01ed\0\127\0\u020a\0\127\0\u0227\0\127\0\127"+
    "\0\127\0\127\0\127\0\127\0\127\0\u0244\0\127\0\127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\2\21\1\22"+
    "\1\23\1\24\1\25\1\4\1\26\1\27\2\4\1\27"+
    "\1\30\1\31\1\32\2\33\1\34\1\33\1\35\1\33"+
    "\1\36\1\33\1\37\24\33\2\40\1\41\1\40\1\42"+
    "\1\43\21\40\1\44\5\40\36\0\1\5\35\0\1\6"+
    "\42\0\1\45\37\0\1\46\37\0\2\21\30\0\1\47"+
    "\7\0\1\50\35\0\1\51\26\0\2\27\6\0\1\27"+
    "\1\0\2\27\3\0\2\33\1\0\1\33\1\0\1\33"+
    "\1\0\1\33\1\0\24\33\2\0\1\34\42\0\1\52"+
    "\33\0\1\53\25\0\2\40\1\0\1\40\2\0\21\40"+
    "\1\0\5\40\2\0\1\41\32\0\2\54\1\55\1\54"+
    "\1\56\1\57\10\54\1\60\10\54\1\57\1\54\1\57"+
    "\3\54\2\46\1\0\1\46\1\0\30\46\2\0\1\55"+
    "\32\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\1\1\2\11\1\1\2\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\7\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	// CONSTANTS
	private static final int STRING_MAX_LENGTH = 1024;
	
	// BUFFERS
	private int commentDepth = 0;
	private StringBuilder commentBuffer = new StringBuilder();
	private StringBuilder stringBuffer = new StringBuilder();
	
	// TOKEN DEFINITION
	public enum TokenType {
		OBJECTID, TYPEID, INT, STRING, PLUS, MINUS, TIMES, 
		DIVIDE, LT, LE, EQ, ASSIGN, ARROW, AT, DOT, COLON,
		SEMI, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, NEG,
		
		CLASS, ELSE, FI, IF, IN, INHERITS, ISVOID, LET, LOOP, 
		POOL, THEN, WHILE, CASE, ESAC, NEW, OF, NOT, TRUE, FALSE,
		
		COMMENT, WHITESPACE, ERROR, EOF
	}
	
	public record Token(TokenType type, String value) {
		public static Token eof() {
			return new Token(TokenType.EOF, "");
		}
		@Override
		public String toString() {
			return type + "('" + value + "')";
		}
	}
	
	// KEYWORDS
	private static final Map<String, TokenType> KEYWORDS = new HashMap<>();
	static {
		KEYWORDS.put("class", TokenType.CLASS);
		KEYWORDS.put("else", TokenType.ELSE);
		KEYWORDS.put("fi", TokenType.FI);
		KEYWORDS.put("if", TokenType.IF);
		KEYWORDS.put("in", TokenType.IN);
		KEYWORDS.put("inherits", TokenType.INHERITS);
		KEYWORDS.put("isvoid", TokenType.ISVOID);
		KEYWORDS.put("let", TokenType.LET);
		KEYWORDS.put("loop", TokenType.LOOP);
		KEYWORDS.put("pool", TokenType.POOL);
		KEYWORDS.put("then", TokenType.THEN);
		KEYWORDS.put("while", TokenType.WHILE);
		KEYWORDS.put("case", TokenType.CASE);
		KEYWORDS.put("esac", TokenType.ESAC);
		KEYWORDS.put("new", TokenType.NEW);
		KEYWORDS.put("of", TokenType.OF);
		KEYWORDS.put("not", TokenType.NOT);
		KEYWORDS.put("true", TokenType.TRUE);
		KEYWORDS.put("false", TokenType.FALSE);
	}
	
	// BASE EXCEPTIONS
	public class LexicalException extends RuntimeException {
		private static final long serialVersionUID = 1L;
		
		public LexicalException(String message) {
			super(message);
		}
	}
	
	// EXCEPTIONS
	public class StringTooLongException extends LexicalException {
		private static final long serialVersionUID = 1L;
		
	    public StringTooLongException(String message) {
	        super(message);
	    }
	}
	
	public class UnterminatedStringException extends LexicalException {
		private static final long serialVersionUID = 1L;
	    public UnterminatedStringException(String message) {
	    	super(message);
	    }
	}

	public class NullCharInStringException extends LexicalException {
		private static final long serialVersionUID = 1L;
	    public NullCharInStringException(String message) {
	    	super(message);
	    }
	}

	public class UnterminatedCommentException extends LexicalException {
		private static final long serialVersionUID = 1L;
	    public UnterminatedCommentException(String message) {
	    	super(message);
	    }
	}

	public class InvalidCharException extends LexicalException {
		private static final long serialVersionUID = 1L;
	    public InvalidCharException(String message) {
	    	super(message);
	    }
	}
	
	public class IntegerOutOfRangeException extends LexicalException {
		private static final long serialVersionUID = 1L;
	    public IntegerOutOfRangeException(String message) {
	    	super(message);
	    }
	}
	
	// UTIL
	private String unescape(String s) { 
		StringBuilder sb = new StringBuilder(); 
		for (int i = 0; i < s.length(); i++) { 
			char c = s.charAt(i); 
			if (c == '\\' && i + 1 < s.length()) { 
				char nxt = s.charAt(++i); 
				switch (nxt) { 
				case 'n': sb.append('\n'); break; 
				case 't': sb.append('\t'); break; 
				case 'b': sb.append('\b'); break; 
				case 'f': sb.append('\f'); break; 
				case '"': sb.append('"'); break; 
				case '\\': sb.append('\\'); break; 
				} 
			} else { 
				throw new LexicalException("Isso não deveria acontecer.");
			} 
		} 
		return sb.toString(); 
	}
	
	public int getLine() {
		return yyline + 1;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public compiler.Lexer.Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return Token.eof();
            }  // fall though
            case 49: break;
            case COMMENT: {
              throw new UnterminatedCommentException("Comentário de bloco não terminado (EOF dentro de (* ... *))");
            }  // fall though
            case 50: break;
            case STRING: {
              throw new UnterminatedStringException("EOF dentro de string na linha " + (yyline+1));
            }  // fall though
            case 51: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new InvalidCharException("Caractere inválido: " + yytext());
            }
          // fall through
          case 39: break;
          case 2:
            { return new Token(TokenType.WHITESPACE, yytext());
            }
          // fall through
          case 40: break;
          case 3:
            { yyline++;
            }
          // fall through
          case 41: break;
          case 4:
            { stringBuffer.setLength(0);
	yybegin(STRING);
            }
          // fall through
          case 42: break;
          case 5:
            { return new Token(TokenType.LPAREN, yytext());
            }
          // fall through
          case 43: break;
          case 6:
            { return new Token(TokenType.RPAREN, yytext());
            }
          // fall through
          case 44: break;
          case 7:
            { return new Token(TokenType.TIMES, yytext());
            }
          // fall through
          case 45: break;
          case 8:
            { return new Token(TokenType.PLUS, yytext());
            }
          // fall through
          case 46: break;
          case 9:
            { return new Token(TokenType.COMMA, yytext());
            }
          // fall through
          case 47: break;
          case 10:
            { return new Token(TokenType.MINUS, yytext());
            }
          // fall through
          case 48: break;
          case 11:
            { return new Token(TokenType.DOT, yytext());
            }
          // fall through
          case 49: break;
          case 12:
            { return new Token(TokenType.DIVIDE, yytext());
            }
          // fall through
          case 50: break;
          case 13:
            { try {
		Integer.parseInt(yytext());
        return new Token(TokenType.INT, yytext());
	} catch (NumberFormatException e) {
    	throw new IntegerOutOfRangeException("Inteiro fora do intervalo 32 bits na linha " + (yyline + 1));
	}
            }
          // fall through
          case 51: break;
          case 14:
            { return new Token(TokenType.COLON, yytext());
            }
          // fall through
          case 52: break;
          case 15:
            { return new Token(TokenType.SEMI, yytext());
            }
          // fall through
          case 53: break;
          case 16:
            { return new Token(TokenType.LT, yytext());
            }
          // fall through
          case 54: break;
          case 17:
            { return new Token(TokenType.EQ, yytext());
            }
          // fall through
          case 55: break;
          case 18:
            { return new Token(TokenType.AT, yytext());
            }
          // fall through
          case 56: break;
          case 19:
            { String text = yytext();
    String lowerText = text.toLowerCase();

    // 1. LÓGICA DE EXCEÇÃO: Trata 'true' e 'false' primeiro.
    if (lowerText.equals("true")) {
        if (Character.isLowerCase(text.charAt(0))) {
            // Se começa com minúscula, normaliza para "true".
            return new Token(TokenType.TRUE, "true");
        } else {
            // Se não, é um TYPEID e mantém o texto original.
            return new Token(TokenType.TYPEID, text);
        }
    }

    else if (lowerText.equals("false")) {
        if (Character.isLowerCase(text.charAt(0))) {
            // Se começa com minúscula, normaliza para "false".
            return new Token(TokenType.FALSE, "false");
        } else {
            // Se não, é um TYPEID e mantém o texto original.
            return new Token(TokenType.TYPEID, text);
        }
    }

    // 2. REGRA GERAL: Para todas as outras palavras.
    else {
        // Verifica se é outra palavra-chave (class, if, etc.)
        TokenType keywordType = KEYWORDS.get(lowerText);
        if (keywordType != null) {
            // O valor é sempre a versão minúscula.
            return new Token(keywordType, lowerText);
        }

        // Se não for, é um identificador.
        else {
            if (Character.isUpperCase(text.charAt(0))) {
                // O valor é sempre a versão minúscula.
                return new Token(TokenType.TYPEID, lowerText);
            } else {
                // O valor já é (ou se torna) minúsculo.
                return new Token(TokenType.OBJECTID, lowerText);
            }
        }
    }
            }
          // fall through
          case 57: break;
          case 20:
            { return new Token(TokenType.LBRACE, yytext());
            }
          // fall through
          case 58: break;
          case 21:
            { return new Token(TokenType.RBRACE, yytext());
            }
          // fall through
          case 59: break;
          case 22:
            { return new Token(TokenType.NEG, yytext());
            }
          // fall through
          case 60: break;
          case 23:
            { commentBuffer.append(yytext());
            }
          // fall through
          case 61: break;
          case 24:
            { yyline++;
    commentBuffer.append(yytext());
            }
          // fall through
          case 62: break;
          case 25:
            { if (stringBuffer.length() + yytext().length() > STRING_MAX_LENGTH) {
		throw new StringTooLongException("String excede 1024 caracteres na linha " + (yyline+1));
	}
	stringBuffer.append(yytext());
            }
          // fall through
          case 63: break;
          case 26:
            { throw new UnterminatedStringException("String não terminada na linha " + (yyline+1));
            }
          // fall through
          case 64: break;
          case 27:
            { String value = stringBuffer.toString();
	yybegin(YYINITIAL);
	return new Token(TokenType.STRING, value);
            }
          // fall through
          case 65: break;
          case 28:
            { commentDepth = 1;
	commentBuffer.setLength(0);
	commentBuffer.append(yytext());
	yybegin(COMMENT);
            }
          // fall through
          case 66: break;
          case 29:
            { return new Token(TokenType.COMMENT, yytext());
            }
          // fall through
          case 67: break;
          case 30:
            { return new Token(TokenType.ASSIGN, yytext());
            }
          // fall through
          case 68: break;
          case 31:
            { return new Token(TokenType.LE, yytext());
            }
          // fall through
          case 69: break;
          case 32:
            { return new Token(TokenType.ARROW, yytext());
            }
          // fall through
          case 70: break;
          case 33:
            { commentDepth++;
	commentBuffer.append(yytext());
            }
          // fall through
          case 71: break;
          case 34:
            { commentDepth--;
	commentBuffer.append(yytext());
	if (commentDepth == 0) {
		yybegin(YYINITIAL);
		return new Token(TokenType.COMMENT, commentBuffer.toString());
	}
            }
          // fall through
          case 72: break;
          case 35:
            { if (stringBuffer.length() + 1 > STRING_MAX_LENGTH) {
		throw new StringTooLongException("String excede 1024 caracteres na linha " + (yyline+1));
	}
	String t = yytext();
	stringBuffer.append(t.charAt(1));
            }
          // fall through
          case 73: break;
          case 36:
            { String t = yytext();
	for (int i = 0; i < t.length(); i++) {
		if (t.charAt(i) == '\n') yyline++;
	}
            }
          // fall through
          case 74: break;
          case 37:
            { String t = unescape(yytext());
	if (stringBuffer.length() + t.length() > STRING_MAX_LENGTH) {
		throw new StringTooLongException("String excede 1024 caracteres na linha " + (yyline+1));
	}
	stringBuffer.append(t);
            }
          // fall through
          case 75: break;
          case 38:
            { throw new NullCharInStringException("String contém \\0 na linha " + (yyline+1));
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
